<?php

/**
 * Base class that represents a row from the 'sft_organismos' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Mon Sep 24 21:13:11 2012
 *
 * @package    plugins.sftGuardPlugin.lib.model.om
 */
abstract class BaseSftOrganismo extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        SftOrganismoPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the nombre field.
	 * @var        string
	 */
	protected $nombre;

	/**
	 * The value for the abreviatura field.
	 * @var        string
	 */
	protected $abreviatura;

	/**
	 * The value for the id_tipoorganismo field.
	 * @var        int
	 */
	protected $id_tipoorganismo;

	/**
	 * The value for the codigo field.
	 * @var        string
	 */
	protected $codigo;

	/**
	 * The value for the descripcion field.
	 * @var        string
	 */
	protected $descripcion;

	/**
	 * The value for the sitioweb field.
	 * @var        string
	 */
	protected $sitioweb;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the id_contacto field.
	 * @var        int
	 */
	protected $id_contacto;

	/**
	 * The value for the cargo field.
	 * @var        string
	 */
	protected $cargo;

	/**
	 * The value for the id_depende field.
	 * @var        int
	 */
	protected $id_depende;

	/**
	 * The value for the id_pais field.
	 * @var        int
	 */
	protected $id_pais;

	/**
	 * @var        SftTipoOrganismo
	 */
	protected $aSftTipoOrganismo;

	/**
	 * @var        SftPersona
	 */
	protected $aSftPersona;

	/**
	 * @var        SftOrganismo
	 */
	protected $aSftOrganismoRelatedByIdDepende;

	/**
	 * @var        GenPais
	 */
	protected $aGenPais;

	/**
	 * @var        array SftOrganismo[] Collection to store aggregation of SftOrganismo objects.
	 */
	protected $collSftOrganismosRelatedByIdDepende;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSftOrganismosRelatedByIdDepende.
	 */
	private $lastSftOrganismoRelatedByIdDependeCriteria = null;

	/**
	 * @var        array SftUsuario[] Collection to store aggregation of SftUsuario objects.
	 */
	protected $collSftUsuarios;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSftUsuarios.
	 */
	private $lastSftUsuarioCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'SftOrganismoPeer';

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [nombre] column value.
	 * 
	 * @return     string
	 */
	public function getNombre()
	{
		return $this->nombre;
	}

	/**
	 * Get the [abreviatura] column value.
	 * 
	 * @return     string
	 */
	public function getAbreviatura()
	{
		return $this->abreviatura;
	}

	/**
	 * Get the [id_tipoorganismo] column value.
	 * 
	 * @return     int
	 */
	public function getIdTipoorganismo()
	{
		return $this->id_tipoorganismo;
	}

	/**
	 * Get the [codigo] column value.
	 * 
	 * @return     string
	 */
	public function getCodigo()
	{
		return $this->codigo;
	}

	/**
	 * Get the [descripcion] column value.
	 * 
	 * @return     string
	 */
	public function getDescripcion()
	{
		return $this->descripcion;
	}

	/**
	 * Get the [sitioweb] column value.
	 * 
	 * @return     string
	 */
	public function getSitioweb()
	{
		return $this->sitioweb;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [id_contacto] column value.
	 * 
	 * @return     int
	 */
	public function getIdContacto()
	{
		return $this->id_contacto;
	}

	/**
	 * Get the [cargo] column value.
	 * 
	 * @return     string
	 */
	public function getCargo()
	{
		return $this->cargo;
	}

	/**
	 * Get the [id_depende] column value.
	 * 
	 * @return     int
	 */
	public function getIdDepende()
	{
		return $this->id_depende;
	}

	/**
	 * Get the [id_pais] column value.
	 * 
	 * @return     int
	 */
	public function getIdPais()
	{
		return $this->id_pais;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     SftOrganismo The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = SftOrganismoPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [nombre] column.
	 * 
	 * @param      string $v new value
	 * @return     SftOrganismo The current object (for fluent API support)
	 */
	public function setNombre($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre !== $v) {
			$this->nombre = $v;
			$this->modifiedColumns[] = SftOrganismoPeer::NOMBRE;
		}

		return $this;
	} // setNombre()

	/**
	 * Set the value of [abreviatura] column.
	 * 
	 * @param      string $v new value
	 * @return     SftOrganismo The current object (for fluent API support)
	 */
	public function setAbreviatura($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->abreviatura !== $v) {
			$this->abreviatura = $v;
			$this->modifiedColumns[] = SftOrganismoPeer::ABREVIATURA;
		}

		return $this;
	} // setAbreviatura()

	/**
	 * Set the value of [id_tipoorganismo] column.
	 * 
	 * @param      int $v new value
	 * @return     SftOrganismo The current object (for fluent API support)
	 */
	public function setIdTipoorganismo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_tipoorganismo !== $v) {
			$this->id_tipoorganismo = $v;
			$this->modifiedColumns[] = SftOrganismoPeer::ID_TIPOORGANISMO;
		}

		if ($this->aSftTipoOrganismo !== null && $this->aSftTipoOrganismo->getId() !== $v) {
			$this->aSftTipoOrganismo = null;
		}

		return $this;
	} // setIdTipoorganismo()

	/**
	 * Set the value of [codigo] column.
	 * 
	 * @param      string $v new value
	 * @return     SftOrganismo The current object (for fluent API support)
	 */
	public function setCodigo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->codigo !== $v) {
			$this->codigo = $v;
			$this->modifiedColumns[] = SftOrganismoPeer::CODIGO;
		}

		return $this;
	} // setCodigo()

	/**
	 * Set the value of [descripcion] column.
	 * 
	 * @param      string $v new value
	 * @return     SftOrganismo The current object (for fluent API support)
	 */
	public function setDescripcion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->descripcion !== $v) {
			$this->descripcion = $v;
			$this->modifiedColumns[] = SftOrganismoPeer::DESCRIPCION;
		}

		return $this;
	} // setDescripcion()

	/**
	 * Set the value of [sitioweb] column.
	 * 
	 * @param      string $v new value
	 * @return     SftOrganismo The current object (for fluent API support)
	 */
	public function setSitioweb($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sitioweb !== $v) {
			$this->sitioweb = $v;
			$this->modifiedColumns[] = SftOrganismoPeer::SITIOWEB;
		}

		return $this;
	} // setSitioweb()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SftOrganismo The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = SftOrganismoPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SftOrganismo The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = SftOrganismoPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [id_contacto] column.
	 * 
	 * @param      int $v new value
	 * @return     SftOrganismo The current object (for fluent API support)
	 */
	public function setIdContacto($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_contacto !== $v) {
			$this->id_contacto = $v;
			$this->modifiedColumns[] = SftOrganismoPeer::ID_CONTACTO;
		}

		if ($this->aSftPersona !== null && $this->aSftPersona->getId() !== $v) {
			$this->aSftPersona = null;
		}

		return $this;
	} // setIdContacto()

	/**
	 * Set the value of [cargo] column.
	 * 
	 * @param      string $v new value
	 * @return     SftOrganismo The current object (for fluent API support)
	 */
	public function setCargo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cargo !== $v) {
			$this->cargo = $v;
			$this->modifiedColumns[] = SftOrganismoPeer::CARGO;
		}

		return $this;
	} // setCargo()

	/**
	 * Set the value of [id_depende] column.
	 * 
	 * @param      int $v new value
	 * @return     SftOrganismo The current object (for fluent API support)
	 */
	public function setIdDepende($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_depende !== $v) {
			$this->id_depende = $v;
			$this->modifiedColumns[] = SftOrganismoPeer::ID_DEPENDE;
		}

		if ($this->aSftOrganismoRelatedByIdDepende !== null && $this->aSftOrganismoRelatedByIdDepende->getId() !== $v) {
			$this->aSftOrganismoRelatedByIdDepende = null;
		}

		return $this;
	} // setIdDepende()

	/**
	 * Set the value of [id_pais] column.
	 * 
	 * @param      int $v new value
	 * @return     SftOrganismo The current object (for fluent API support)
	 */
	public function setIdPais($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_pais !== $v) {
			$this->id_pais = $v;
			$this->modifiedColumns[] = SftOrganismoPeer::ID_PAIS;
		}

		if ($this->aGenPais !== null && $this->aGenPais->getId() !== $v) {
			$this->aGenPais = null;
		}

		return $this;
	} // setIdPais()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->nombre = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->abreviatura = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->id_tipoorganismo = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->codigo = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->descripcion = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->sitioweb = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->created_at = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->updated_at = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->id_contacto = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->cargo = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->id_depende = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->id_pais = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 13; // 13 = SftOrganismoPeer::NUM_COLUMNS - SftOrganismoPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating SftOrganismo object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aSftTipoOrganismo !== null && $this->id_tipoorganismo !== $this->aSftTipoOrganismo->getId()) {
			$this->aSftTipoOrganismo = null;
		}
		if ($this->aSftPersona !== null && $this->id_contacto !== $this->aSftPersona->getId()) {
			$this->aSftPersona = null;
		}
		if ($this->aSftOrganismoRelatedByIdDepende !== null && $this->id_depende !== $this->aSftOrganismoRelatedByIdDepende->getId()) {
			$this->aSftOrganismoRelatedByIdDepende = null;
		}
		if ($this->aGenPais !== null && $this->id_pais !== $this->aGenPais->getId()) {
			$this->aGenPais = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SftOrganismoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = SftOrganismoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aSftTipoOrganismo = null;
			$this->aSftPersona = null;
			$this->aSftOrganismoRelatedByIdDepende = null;
			$this->aGenPais = null;
			$this->collSftOrganismosRelatedByIdDepende = null;
			$this->lastSftOrganismoRelatedByIdDependeCriteria = null;

			$this->collSftUsuarios = null;
			$this->lastSftUsuarioCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SftOrganismoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseSftOrganismo:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				SftOrganismoPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseSftOrganismo:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SftOrganismoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseSftOrganismo:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(SftOrganismoPeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(SftOrganismoPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseSftOrganismo:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				SftOrganismoPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aSftTipoOrganismo !== null) {
				if ($this->aSftTipoOrganismo->isModified() || $this->aSftTipoOrganismo->isNew()) {
					$affectedRows += $this->aSftTipoOrganismo->save($con);
				}
				$this->setSftTipoOrganismo($this->aSftTipoOrganismo);
			}

			if ($this->aSftPersona !== null) {
				if ($this->aSftPersona->isModified() || $this->aSftPersona->isNew()) {
					$affectedRows += $this->aSftPersona->save($con);
				}
				$this->setSftPersona($this->aSftPersona);
			}

			if ($this->aSftOrganismoRelatedByIdDepende !== null) {
				if ($this->aSftOrganismoRelatedByIdDepende->isModified() || $this->aSftOrganismoRelatedByIdDepende->isNew()) {
					$affectedRows += $this->aSftOrganismoRelatedByIdDepende->save($con);
				}
				$this->setSftOrganismoRelatedByIdDepende($this->aSftOrganismoRelatedByIdDepende);
			}

			if ($this->aGenPais !== null) {
				if ($this->aGenPais->isModified() || $this->aGenPais->isNew()) {
					$affectedRows += $this->aGenPais->save($con);
				}
				$this->setGenPais($this->aGenPais);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = SftOrganismoPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = SftOrganismoPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += SftOrganismoPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collSftOrganismosRelatedByIdDepende !== null) {
				foreach ($this->collSftOrganismosRelatedByIdDepende as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSftUsuarios !== null) {
				foreach ($this->collSftUsuarios as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aSftTipoOrganismo !== null) {
				if (!$this->aSftTipoOrganismo->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aSftTipoOrganismo->getValidationFailures());
				}
			}

			if ($this->aSftPersona !== null) {
				if (!$this->aSftPersona->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aSftPersona->getValidationFailures());
				}
			}

			if ($this->aSftOrganismoRelatedByIdDepende !== null) {
				if (!$this->aSftOrganismoRelatedByIdDepende->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aSftOrganismoRelatedByIdDepende->getValidationFailures());
				}
			}

			if ($this->aGenPais !== null) {
				if (!$this->aGenPais->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aGenPais->getValidationFailures());
				}
			}


			if (($retval = SftOrganismoPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collSftOrganismosRelatedByIdDepende !== null) {
					foreach ($this->collSftOrganismosRelatedByIdDepende as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSftUsuarios !== null) {
					foreach ($this->collSftUsuarios as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = SftOrganismoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getNombre();
				break;
			case 2:
				return $this->getAbreviatura();
				break;
			case 3:
				return $this->getIdTipoorganismo();
				break;
			case 4:
				return $this->getCodigo();
				break;
			case 5:
				return $this->getDescripcion();
				break;
			case 6:
				return $this->getSitioweb();
				break;
			case 7:
				return $this->getCreatedAt();
				break;
			case 8:
				return $this->getUpdatedAt();
				break;
			case 9:
				return $this->getIdContacto();
				break;
			case 10:
				return $this->getCargo();
				break;
			case 11:
				return $this->getIdDepende();
				break;
			case 12:
				return $this->getIdPais();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = SftOrganismoPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getNombre(),
			$keys[2] => $this->getAbreviatura(),
			$keys[3] => $this->getIdTipoorganismo(),
			$keys[4] => $this->getCodigo(),
			$keys[5] => $this->getDescripcion(),
			$keys[6] => $this->getSitioweb(),
			$keys[7] => $this->getCreatedAt(),
			$keys[8] => $this->getUpdatedAt(),
			$keys[9] => $this->getIdContacto(),
			$keys[10] => $this->getCargo(),
			$keys[11] => $this->getIdDepende(),
			$keys[12] => $this->getIdPais(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = SftOrganismoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setNombre($value);
				break;
			case 2:
				$this->setAbreviatura($value);
				break;
			case 3:
				$this->setIdTipoorganismo($value);
				break;
			case 4:
				$this->setCodigo($value);
				break;
			case 5:
				$this->setDescripcion($value);
				break;
			case 6:
				$this->setSitioweb($value);
				break;
			case 7:
				$this->setCreatedAt($value);
				break;
			case 8:
				$this->setUpdatedAt($value);
				break;
			case 9:
				$this->setIdContacto($value);
				break;
			case 10:
				$this->setCargo($value);
				break;
			case 11:
				$this->setIdDepende($value);
				break;
			case 12:
				$this->setIdPais($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = SftOrganismoPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setNombre($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setAbreviatura($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setIdTipoorganismo($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCodigo($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setDescripcion($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setSitioweb($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setCreatedAt($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setUpdatedAt($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setIdContacto($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setCargo($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setIdDepende($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setIdPais($arr[$keys[12]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(SftOrganismoPeer::DATABASE_NAME);

		if ($this->isColumnModified(SftOrganismoPeer::ID)) $criteria->add(SftOrganismoPeer::ID, $this->id);
		if ($this->isColumnModified(SftOrganismoPeer::NOMBRE)) $criteria->add(SftOrganismoPeer::NOMBRE, $this->nombre);
		if ($this->isColumnModified(SftOrganismoPeer::ABREVIATURA)) $criteria->add(SftOrganismoPeer::ABREVIATURA, $this->abreviatura);
		if ($this->isColumnModified(SftOrganismoPeer::ID_TIPOORGANISMO)) $criteria->add(SftOrganismoPeer::ID_TIPOORGANISMO, $this->id_tipoorganismo);
		if ($this->isColumnModified(SftOrganismoPeer::CODIGO)) $criteria->add(SftOrganismoPeer::CODIGO, $this->codigo);
		if ($this->isColumnModified(SftOrganismoPeer::DESCRIPCION)) $criteria->add(SftOrganismoPeer::DESCRIPCION, $this->descripcion);
		if ($this->isColumnModified(SftOrganismoPeer::SITIOWEB)) $criteria->add(SftOrganismoPeer::SITIOWEB, $this->sitioweb);
		if ($this->isColumnModified(SftOrganismoPeer::CREATED_AT)) $criteria->add(SftOrganismoPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(SftOrganismoPeer::UPDATED_AT)) $criteria->add(SftOrganismoPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(SftOrganismoPeer::ID_CONTACTO)) $criteria->add(SftOrganismoPeer::ID_CONTACTO, $this->id_contacto);
		if ($this->isColumnModified(SftOrganismoPeer::CARGO)) $criteria->add(SftOrganismoPeer::CARGO, $this->cargo);
		if ($this->isColumnModified(SftOrganismoPeer::ID_DEPENDE)) $criteria->add(SftOrganismoPeer::ID_DEPENDE, $this->id_depende);
		if ($this->isColumnModified(SftOrganismoPeer::ID_PAIS)) $criteria->add(SftOrganismoPeer::ID_PAIS, $this->id_pais);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(SftOrganismoPeer::DATABASE_NAME);

		$criteria->add(SftOrganismoPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of SftOrganismo (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setNombre($this->nombre);

		$copyObj->setAbreviatura($this->abreviatura);

		$copyObj->setIdTipoorganismo($this->id_tipoorganismo);

		$copyObj->setCodigo($this->codigo);

		$copyObj->setDescripcion($this->descripcion);

		$copyObj->setSitioweb($this->sitioweb);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setIdContacto($this->id_contacto);

		$copyObj->setCargo($this->cargo);

		$copyObj->setIdDepende($this->id_depende);

		$copyObj->setIdPais($this->id_pais);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getSftOrganismosRelatedByIdDepende() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSftOrganismoRelatedByIdDepende($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSftUsuarios() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSftUsuario($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     SftOrganismo Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     SftOrganismoPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new SftOrganismoPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a SftTipoOrganismo object.
	 *
	 * @param      SftTipoOrganismo $v
	 * @return     SftOrganismo The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setSftTipoOrganismo(SftTipoOrganismo $v = null)
	{
		if ($v === null) {
			$this->setIdTipoorganismo(NULL);
		} else {
			$this->setIdTipoorganismo($v->getId());
		}

		$this->aSftTipoOrganismo = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the SftTipoOrganismo object, it will not be re-added.
		if ($v !== null) {
			$v->addSftOrganismo($this);
		}

		return $this;
	}


	/**
	 * Get the associated SftTipoOrganismo object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     SftTipoOrganismo The associated SftTipoOrganismo object.
	 * @throws     PropelException
	 */
	public function getSftTipoOrganismo(PropelPDO $con = null)
	{
		if ($this->aSftTipoOrganismo === null && ($this->id_tipoorganismo !== null)) {
			$this->aSftTipoOrganismo = SftTipoOrganismoPeer::retrieveByPk($this->id_tipoorganismo);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aSftTipoOrganismo->addSftOrganismos($this);
			 */
		}
		return $this->aSftTipoOrganismo;
	}

	/**
	 * Declares an association between this object and a SftPersona object.
	 *
	 * @param      SftPersona $v
	 * @return     SftOrganismo The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setSftPersona(SftPersona $v = null)
	{
		if ($v === null) {
			$this->setIdContacto(NULL);
		} else {
			$this->setIdContacto($v->getId());
		}

		$this->aSftPersona = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the SftPersona object, it will not be re-added.
		if ($v !== null) {
			$v->addSftOrganismo($this);
		}

		return $this;
	}


	/**
	 * Get the associated SftPersona object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     SftPersona The associated SftPersona object.
	 * @throws     PropelException
	 */
	public function getSftPersona(PropelPDO $con = null)
	{
		if ($this->aSftPersona === null && ($this->id_contacto !== null)) {
			$this->aSftPersona = SftPersonaPeer::retrieveByPk($this->id_contacto);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aSftPersona->addSftOrganismos($this);
			 */
		}
		return $this->aSftPersona;
	}

	/**
	 * Declares an association between this object and a SftOrganismo object.
	 *
	 * @param      SftOrganismo $v
	 * @return     SftOrganismo The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setSftOrganismoRelatedByIdDepende(SftOrganismo $v = null)
	{
		if ($v === null) {
			$this->setIdDepende(NULL);
		} else {
			$this->setIdDepende($v->getId());
		}

		$this->aSftOrganismoRelatedByIdDepende = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the SftOrganismo object, it will not be re-added.
		if ($v !== null) {
			$v->addSftOrganismoRelatedByIdDepende($this);
		}

		return $this;
	}


	/**
	 * Get the associated SftOrganismo object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     SftOrganismo The associated SftOrganismo object.
	 * @throws     PropelException
	 */
	public function getSftOrganismoRelatedByIdDepende(PropelPDO $con = null)
	{
		if ($this->aSftOrganismoRelatedByIdDepende === null && ($this->id_depende !== null)) {
			$this->aSftOrganismoRelatedByIdDepende = SftOrganismoPeer::retrieveByPk($this->id_depende);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aSftOrganismoRelatedByIdDepende->addSftOrganismosRelatedByIdDepende($this);
			 */
		}
		return $this->aSftOrganismoRelatedByIdDepende;
	}

	/**
	 * Declares an association between this object and a GenPais object.
	 *
	 * @param      GenPais $v
	 * @return     SftOrganismo The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setGenPais(GenPais $v = null)
	{
		if ($v === null) {
			$this->setIdPais(NULL);
		} else {
			$this->setIdPais($v->getId());
		}

		$this->aGenPais = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the GenPais object, it will not be re-added.
		if ($v !== null) {
			$v->addSftOrganismo($this);
		}

		return $this;
	}


	/**
	 * Get the associated GenPais object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     GenPais The associated GenPais object.
	 * @throws     PropelException
	 */
	public function getGenPais(PropelPDO $con = null)
	{
		if ($this->aGenPais === null && ($this->id_pais !== null)) {
			$this->aGenPais = GenPaisPeer::retrieveByPk($this->id_pais);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aGenPais->addSftOrganismos($this);
			 */
		}
		return $this->aGenPais;
	}

	/**
	 * Clears out the collSftOrganismosRelatedByIdDepende collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSftOrganismosRelatedByIdDepende()
	 */
	public function clearSftOrganismosRelatedByIdDepende()
	{
		$this->collSftOrganismosRelatedByIdDepende = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSftOrganismosRelatedByIdDepende collection (array).
	 *
	 * By default this just sets the collSftOrganismosRelatedByIdDepende collection to an empty array (like clearcollSftOrganismosRelatedByIdDepende());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSftOrganismosRelatedByIdDepende()
	{
		$this->collSftOrganismosRelatedByIdDepende = array();
	}

	/**
	 * Gets an array of SftOrganismo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this SftOrganismo has previously been saved, it will retrieve
	 * related SftOrganismosRelatedByIdDepende from storage. If this SftOrganismo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SftOrganismo[]
	 * @throws     PropelException
	 */
	public function getSftOrganismosRelatedByIdDepende($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SftOrganismoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSftOrganismosRelatedByIdDepende === null) {
			if ($this->isNew()) {
			   $this->collSftOrganismosRelatedByIdDepende = array();
			} else {

				$criteria->add(SftOrganismoPeer::ID_DEPENDE, $this->id);

				SftOrganismoPeer::addSelectColumns($criteria);
				$this->collSftOrganismosRelatedByIdDepende = SftOrganismoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SftOrganismoPeer::ID_DEPENDE, $this->id);

				SftOrganismoPeer::addSelectColumns($criteria);
				if (!isset($this->lastSftOrganismoRelatedByIdDependeCriteria) || !$this->lastSftOrganismoRelatedByIdDependeCriteria->equals($criteria)) {
					$this->collSftOrganismosRelatedByIdDepende = SftOrganismoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSftOrganismoRelatedByIdDependeCriteria = $criteria;
		return $this->collSftOrganismosRelatedByIdDepende;
	}

	/**
	 * Returns the number of related SftOrganismo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SftOrganismo objects.
	 * @throws     PropelException
	 */
	public function countSftOrganismosRelatedByIdDepende(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SftOrganismoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSftOrganismosRelatedByIdDepende === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SftOrganismoPeer::ID_DEPENDE, $this->id);

				$count = SftOrganismoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SftOrganismoPeer::ID_DEPENDE, $this->id);

				if (!isset($this->lastSftOrganismoRelatedByIdDependeCriteria) || !$this->lastSftOrganismoRelatedByIdDependeCriteria->equals($criteria)) {
					$count = SftOrganismoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collSftOrganismosRelatedByIdDepende);
				}
			} else {
				$count = count($this->collSftOrganismosRelatedByIdDepende);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SftOrganismo object to this object
	 * through the SftOrganismo foreign key attribute.
	 *
	 * @param      SftOrganismo $l SftOrganismo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSftOrganismoRelatedByIdDepende(SftOrganismo $l)
	{
		if ($this->collSftOrganismosRelatedByIdDepende === null) {
			$this->initSftOrganismosRelatedByIdDepende();
		}
		if (!in_array($l, $this->collSftOrganismosRelatedByIdDepende, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSftOrganismosRelatedByIdDepende, $l);
			$l->setSftOrganismoRelatedByIdDepende($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SftOrganismo is new, it will return
	 * an empty collection; or if this SftOrganismo has previously
	 * been saved, it will retrieve related SftOrganismosRelatedByIdDepende from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SftOrganismo.
	 */
	public function getSftOrganismosRelatedByIdDependeJoinSftTipoOrganismo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SftOrganismoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSftOrganismosRelatedByIdDepende === null) {
			if ($this->isNew()) {
				$this->collSftOrganismosRelatedByIdDepende = array();
			} else {

				$criteria->add(SftOrganismoPeer::ID_DEPENDE, $this->id);

				$this->collSftOrganismosRelatedByIdDepende = SftOrganismoPeer::doSelectJoinSftTipoOrganismo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SftOrganismoPeer::ID_DEPENDE, $this->id);

			if (!isset($this->lastSftOrganismoRelatedByIdDependeCriteria) || !$this->lastSftOrganismoRelatedByIdDependeCriteria->equals($criteria)) {
				$this->collSftOrganismosRelatedByIdDepende = SftOrganismoPeer::doSelectJoinSftTipoOrganismo($criteria, $con, $join_behavior);
			}
		}
		$this->lastSftOrganismoRelatedByIdDependeCriteria = $criteria;

		return $this->collSftOrganismosRelatedByIdDepende;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SftOrganismo is new, it will return
	 * an empty collection; or if this SftOrganismo has previously
	 * been saved, it will retrieve related SftOrganismosRelatedByIdDepende from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SftOrganismo.
	 */
	public function getSftOrganismosRelatedByIdDependeJoinSftPersona($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SftOrganismoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSftOrganismosRelatedByIdDepende === null) {
			if ($this->isNew()) {
				$this->collSftOrganismosRelatedByIdDepende = array();
			} else {

				$criteria->add(SftOrganismoPeer::ID_DEPENDE, $this->id);

				$this->collSftOrganismosRelatedByIdDepende = SftOrganismoPeer::doSelectJoinSftPersona($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SftOrganismoPeer::ID_DEPENDE, $this->id);

			if (!isset($this->lastSftOrganismoRelatedByIdDependeCriteria) || !$this->lastSftOrganismoRelatedByIdDependeCriteria->equals($criteria)) {
				$this->collSftOrganismosRelatedByIdDepende = SftOrganismoPeer::doSelectJoinSftPersona($criteria, $con, $join_behavior);
			}
		}
		$this->lastSftOrganismoRelatedByIdDependeCriteria = $criteria;

		return $this->collSftOrganismosRelatedByIdDepende;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SftOrganismo is new, it will return
	 * an empty collection; or if this SftOrganismo has previously
	 * been saved, it will retrieve related SftOrganismosRelatedByIdDepende from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SftOrganismo.
	 */
	public function getSftOrganismosRelatedByIdDependeJoinGenPais($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SftOrganismoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSftOrganismosRelatedByIdDepende === null) {
			if ($this->isNew()) {
				$this->collSftOrganismosRelatedByIdDepende = array();
			} else {

				$criteria->add(SftOrganismoPeer::ID_DEPENDE, $this->id);

				$this->collSftOrganismosRelatedByIdDepende = SftOrganismoPeer::doSelectJoinGenPais($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SftOrganismoPeer::ID_DEPENDE, $this->id);

			if (!isset($this->lastSftOrganismoRelatedByIdDependeCriteria) || !$this->lastSftOrganismoRelatedByIdDependeCriteria->equals($criteria)) {
				$this->collSftOrganismosRelatedByIdDepende = SftOrganismoPeer::doSelectJoinGenPais($criteria, $con, $join_behavior);
			}
		}
		$this->lastSftOrganismoRelatedByIdDependeCriteria = $criteria;

		return $this->collSftOrganismosRelatedByIdDepende;
	}

	/**
	 * Clears out the collSftUsuarios collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSftUsuarios()
	 */
	public function clearSftUsuarios()
	{
		$this->collSftUsuarios = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSftUsuarios collection (array).
	 *
	 * By default this just sets the collSftUsuarios collection to an empty array (like clearcollSftUsuarios());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSftUsuarios()
	{
		$this->collSftUsuarios = array();
	}

	/**
	 * Gets an array of SftUsuario objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this SftOrganismo has previously been saved, it will retrieve
	 * related SftUsuarios from storage. If this SftOrganismo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SftUsuario[]
	 * @throws     PropelException
	 */
	public function getSftUsuarios($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SftOrganismoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSftUsuarios === null) {
			if ($this->isNew()) {
			   $this->collSftUsuarios = array();
			} else {

				$criteria->add(SftUsuarioPeer::ID_ORGANISMO, $this->id);

				SftUsuarioPeer::addSelectColumns($criteria);
				$this->collSftUsuarios = SftUsuarioPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SftUsuarioPeer::ID_ORGANISMO, $this->id);

				SftUsuarioPeer::addSelectColumns($criteria);
				if (!isset($this->lastSftUsuarioCriteria) || !$this->lastSftUsuarioCriteria->equals($criteria)) {
					$this->collSftUsuarios = SftUsuarioPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSftUsuarioCriteria = $criteria;
		return $this->collSftUsuarios;
	}

	/**
	 * Returns the number of related SftUsuario objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SftUsuario objects.
	 * @throws     PropelException
	 */
	public function countSftUsuarios(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SftOrganismoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSftUsuarios === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SftUsuarioPeer::ID_ORGANISMO, $this->id);

				$count = SftUsuarioPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SftUsuarioPeer::ID_ORGANISMO, $this->id);

				if (!isset($this->lastSftUsuarioCriteria) || !$this->lastSftUsuarioCriteria->equals($criteria)) {
					$count = SftUsuarioPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collSftUsuarios);
				}
			} else {
				$count = count($this->collSftUsuarios);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SftUsuario object to this object
	 * through the SftUsuario foreign key attribute.
	 *
	 * @param      SftUsuario $l SftUsuario
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSftUsuario(SftUsuario $l)
	{
		if ($this->collSftUsuarios === null) {
			$this->initSftUsuarios();
		}
		if (!in_array($l, $this->collSftUsuarios, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSftUsuarios, $l);
			$l->setSftOrganismo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SftOrganismo is new, it will return
	 * an empty collection; or if this SftOrganismo has previously
	 * been saved, it will retrieve related SftUsuarios from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SftOrganismo.
	 */
	public function getSftUsuariosJoinSftPersona($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SftOrganismoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSftUsuarios === null) {
			if ($this->isNew()) {
				$this->collSftUsuarios = array();
			} else {

				$criteria->add(SftUsuarioPeer::ID_ORGANISMO, $this->id);

				$this->collSftUsuarios = SftUsuarioPeer::doSelectJoinSftPersona($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SftUsuarioPeer::ID_ORGANISMO, $this->id);

			if (!isset($this->lastSftUsuarioCriteria) || !$this->lastSftUsuarioCriteria->equals($criteria)) {
				$this->collSftUsuarios = SftUsuarioPeer::doSelectJoinSftPersona($criteria, $con, $join_behavior);
			}
		}
		$this->lastSftUsuarioCriteria = $criteria;

		return $this->collSftUsuarios;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collSftOrganismosRelatedByIdDepende) {
				foreach ((array) $this->collSftOrganismosRelatedByIdDepende as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSftUsuarios) {
				foreach ((array) $this->collSftUsuarios as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collSftOrganismosRelatedByIdDepende = null;
		$this->collSftUsuarios = null;
			$this->aSftTipoOrganismo = null;
			$this->aSftPersona = null;
			$this->aSftOrganismoRelatedByIdDepende = null;
			$this->aGenPais = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseSftOrganismo:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseSftOrganismo::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseSftOrganismo
